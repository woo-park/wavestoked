buildscript {
    ext {
        springBootVersion = '2.1.9.RELEASE'
    }
    repositories {  //어떤 원격 저장소에서 받을지를 정합니다
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }


    //앞의 코드는 project plugin 의존성 관리를 위한 config
}
//cmd shift ctrl A
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' //스프링부트의 의존성들을 관리해주는



group 'com.wavestoked'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8  // added

repositories {
    mavenCentral()
    jcenter()
}

//dependencies {
//    testCompile group: 'junit', name: 'junit', version: '4.12'
//}

dependencies {
//    compile('org.springframework.boot:spring-boot-starter-web') //ctr + option + space 자동완성
//    compile('org.projectlombok:lombok')
//    compile('org.springframework.boot:spring-boot-starter-data-jpa')    // abstracted library
//    compile('com.h2database:h2') // inmemory relational db -> when rebooting, erases memory
//    testCompile('org.springframework.boot:spring-boot-starter-test')
//    compile('org.springframework.boot:spring-boot-starter-mustache')
//    // compile('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure')   //from internet
////     compile('org.springframework.security.oauth:spring-security-oauth2')    //from jojoldu
//
//    // compile('org.springframework.boot:spring-security-oauth2-autoconfigure')
//
//    // this fixes the gradle version problem
//    // https://github.com/jojoldu/freelec-springboot2-webservice/issues/78
//    compile('org.springframework.boot:spring-boot-starter-oauth2-client')   //jojoldu
////    compile('org.springframework.session:spring-session')
//
//    testCompile('org.springframework.boot:spring-boot-starter-test')
//    testCompile("org.springframework.security:spring-security-test")


    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
//    compile 'mysql:mysql-connector-java:5.1.48'

    compile('org.springframework.boot:spring-boot-starter-mustache')
//    compile('com.h2database:h2:1.4.200')
    compile('com.h2database:h2')

    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
    compile('org.springframework.session:spring-session-jdbc')      // to sync multiple tomcats' => session

    compile("org.mariadb.jdbc:mariadb-java-client")

//    compile group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '1.0.0'
    compile group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.10.0'


    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.springframework.security:spring-security-test")

    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'


    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.0'

    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    compile group: 'com.auth0', name: 'java-jwt', version: '3.10.3'
    // 중요
// https://mvnrepository.com/artifact/com.opencsv/opencsv
    compile group: 'com.opencsv', name: 'opencsv', version: '4.4'

    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.9'



}



task dockerLocalRun(){
    doLast{
        def imageName = "${project.name}:${project.version}"
        def containerName = "dockerdemo"

        exec{ commandLine "docker stop ${containerName}".split(' ') }
        exec{ commandLine "docker rm ${containerName}".split(' ') }
        exec{ commandLine "docker run -d -p 80:8080 --name ${containerName} ${imageName}".split(' ') }

        println('\n도커 빌드 완료.')
    }
}

test {
    useJUnitPlatform()
}





configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
// we're not using spring initializer bc then we can't understand what build.gradle does

